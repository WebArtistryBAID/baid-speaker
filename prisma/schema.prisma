generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

enum UserType {
  student
  teacher
}

model User {
  id                   Int                @id
  name                 String
  pinyin               String
  phone                String?
  permissions          String[]
  logs                 UserAuditLog[]
  type                 UserType
  oaTokens             OATokens?
  lectures             Lecture[]          @relation("lectures")
  assignedLectures     Lecture[]          @relation("assignedLectures")
  assignedPosters      Lecture[]          @relation("assignedPosters")
  assignedTeachers     Lecture[]          @relation("assignedTeachers")
  lectureLogs          LectureAuditLog[]
  assignedTasks        LectureTask[]
  inboxNotifications   NotificationType[] @default([assignedHost, confirmedDate, assignedTeacher, assignedPosterDesigner, submittedPoster, approvedPoster, createdGroupChat, sentAdvertisements, teacherApproved, confirmedLocation, testedDevice, updatedLiveAudience, submittedFeedback, submittedVideo, submittedReflection, modifiedStatus])
  smsNotifications     NotificationType[] @default([assignedHost, confirmedDate, assignedTeacher, submittedPoster, approvedPoster, teacherApproved, modifiedStatus, submittedVideo])
  notifications        Notification[]
  comments             Comment[]
  collaboratedLectures Lecture[]
}

enum UserAuditLogType {
  login
}

model UserAuditLog {
  id     Int              @id @default(autoincrement())
  time   DateTime         @default(now())
  type   UserAuditLogType
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  values String[]
}

model OATokens {
  id           Int    @id @default(autoincrement())
  accessToken  String
  refreshToken String
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  assignedHost
  confirmedDate
  assignedTeacher
  assignedPosterDesigner
  submittedPoster
  approvedPoster
  createdGroupChat
  sentAdvertisements
  teacherApproved
  confirmedLocation
  testedDevice
  updatedLiveAudience
  submittedFeedback
  submittedVideo
  submittedReflection
  modifiedStatus
}

model Notification {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  type      NotificationType
  values    String[]
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  lecture   Lecture?         @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId Int?
}

model AvailableDate {
  date DateTime @id
}

enum LectureTasks {
  confirmDate
  confirmNeedComPoster
  confirmPosterDesigner
  submitPoster
  inviteTeacher
  submitPresentation
  teacherApprovePresentation
  schoolApprovePoster
  confirmLocation
  testDevice
  createGroupChat
  inviteParticipants
  sendAdvertisements
  updateLiveAudience // Post-lecture
  submitFeedback // Post-lecture
  submitVideo // Post-lecture
  submitReflection // Post-lecture
}

model LectureTask {
  id          Int          @id @default(autoincrement())
  type        LectureTasks
  assignee    User         @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  assigneeId  Int
  lecture     Lecture      @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId   Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  dueAt       DateTime
  completedAt DateTime?
}

enum LectureAuditLogType {
  created
  assignedHost
  confirmedDate
  assignedTeacher
  confirmedNeedComPoster
  confirmedSelfDesignPoster
  assignedPosterDesigner
  submittedPoster
  submittedPresentation
  approvedPoster
  createdGroupChat
  invitedParticipants
  sentAdvertisements
  teacherApproved
  confirmedLocation
  testedDevice
  updatedLiveAudience
  submittedFeedback
  submittedVideo
  submittedReflection
  modifiedStatus
  markedReclaimable
  removedTeacher
  removedArtist
  addedCollaborator
}

enum LectureStatus {
  waiting
  completingPreTasks
  ready
  completingPostTasks
  completed
}

model LectureAuditLog {
  id        Int                 @id @default(autoincrement())
  time      DateTime            @default(now())
  type      LectureAuditLogType
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  lecture   Lecture             @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId Int
  values    String[]
}

model Lecture {
  id                Int               @id @default(autoincrement())
  title             String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now()) @updatedAt
  contactWeChat     String
  preSurveyQ1       String // 1. Please describe the content of your lecture.
  preSurveyQ2       String // 2. Please describe why you chose this topic.
  date              DateTime?
  status            LectureStatus
  user              User              @relation("lectures", fields: [userId], references: [id])
  userId            Int
  collaborators     User[]
  assignee          User?             @relation("assignedLectures", fields: [assigneeId], references: [id])
  assigneeId        Int?
  reclaimable       Boolean           @default(false)
  posterAssignee    User?             @relation("assignedPosters", fields: [posterAssigneeId], references: [id])
  posterAssigneeId  Int?
  needComPoster     Boolean?
  assigneeTeacher   User?             @relation("assignedTeachers", fields: [assigneeTeacherId], references: [id])
  assigneeTeacherId Int?
  teacherPreFdbk    String?
  slidesApproved    Boolean?
  tasks             LectureTask[]
  posterApproved    Boolean?
  uploadedGroupQR   String?
  uploadedSlides    String?
  uploadedPoster    String?
  uploadedVideo     String?
  uploadedFeedback  String?
  location          String?
  teacherRating     Int?
  liveAudience      Int?
  logs              LectureAuditLog[]
  viewedUsers       Int[]
  likedUsers        Int[]
  relatedNotis      Notification[]
  comments          Comment[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  content   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  lecture   Lecture   @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId Int
  replyTo   Comment?  @relation("replies", fields: [replyToId], references: [id]) // Only one level of reply is allowed
  replyToId Int?
  replies   Comment[] @relation("replies")
  anonymous Boolean   @default(false)
}
